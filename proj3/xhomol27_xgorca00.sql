drop table pobocka cascade constraints;
drop table zamestnanec cascade constraints;

drop table klient cascade constraints;
drop table platobnakarta cascade constraints;
drop table ucet cascade constraints;
drop table tranzakcia cascade constraints;

create table pobocka (
    pobockaID  number generated by default as identity primary key,
    hodinyod varchar(5) not null , -- pretoze hodiny nam stacia ako string formatu hh:mm
    hodinydo varchar(5) not null ,
    ulica varchar(50) not null ,
    mesto varchar(50) not null ,
    psc varchar(5)  -- lebo number vymaze 0 na zaciatku
);

create table zamestnanec (
    zamestnanecID number generated by default as identity primary key ,
    meno varchar(50) not null,
    priezvisko varchar(50) not null,
    email varchar(50) default null,      -- nemusi by not null pretoze moze mat bud telefon alebo email alebo sa mu posle odkaz na adresu
    telefon varchar(50) default null,
    ulica varchar(50) not null ,
    mesto varchar(50) not null ,
    psc varchar(50) not null ,-- lebo obsahuje char napr medzera
    plat int not null,
    pracuje int not null ,
    nadrriadeny varchar(50), -- moze byt null pretoze najvyssi nadriadeny v hierarchii uz nema ziadneho nadriadeneho
    FOREIGN KEY (pracuje) REFERENCES pobocka(pobockaID) on delete cascade
);

create table klient (
    klientID number generated by default as identity primary key,
    meno varchar(50) not null,
    priezvisko varchar(50) not null,
    datum_narodenia date,
    email varchar(50) default null,      -- nemusi by not null pretoze moze mat bud telefon alebo email alebo sa mu posle odkaz na adresu
    telefon varchar(50) default null,
    ulica varchar(50) not null ,
    mesto varchar(50) not null ,
    psc varchar(50) not null ,-- lebo obsahuje char napr medzera
    limit int,      -- limit nemusi byt lebo vlastnik moze mat neobmedzeni limit kdezto disponent nie
    pravo_zmena_hesla number(1) default 0 , -- pravo na zmenu hesla
    pravo_pridat_disponenta number(1) default 0 ,
    pravo_zmena_limit number(1) default 0
);


create table platobnakarta(
    platobnakartaID int not null ,
    drzitel varchar(50) not null, -- drzitel nemusi
    PIN number(4) not null , ----  banky mavaju pinkody ktore obsahuju prave 4 cislice
    platobnylimit int not null, -- vzdy musi mat limit
    pobockaID int not null,
    FOREIGN KEY (pobockaID) REFERENCES pobocka(pobockaID) on delete cascade,
    ma int not null, -- drzitel je zaroven klientom banky ktory vlastni banku
    FOREIGN KEY (ma) REFERENCES klient(klientID) on delete cascade
);

create table ucet(
    ucetID number generated by default as identity primary key ,
    nazov varchar(50) not null, -- drzitel nemusi
    zostatok int not null , ----  nemoze byt null, pretoze vacsinou u bank pri zavedeni uctu sa musizadat vzdy nejaka suma ktora je vratena az po zruseni uctu
    zriadenie date , --not null,
    typuctu varchar(12) check ( typuctu in ('bezny','sporiaci','internetovy')) NOT NULL ,
    limit int default null,  -- pre bezny ucet
    urok float default null,    -- pre sporiaci ucet
    heslo varchar(50) default null, -- pre internetovy ucet
    vlastni int not null, -- drzitel je zaroven klientom banky ktory vlastni banku
    FOREIGN KEY (vlastni) REFERENCES klient(klientID) on delete cascade
);

create table tranzakcia (
    tranzakciaID int not null ,
    ucetID int not null ,
    druhtranzakcie varchar(50) not null,
    ciastka int not null , ---- nemozeme poslat 0
    datum date not null ,
    FOREIGN KEY (ucetID) REFERENCES ucet(ucetID),
    sprostrekovatelID int not null,
    FOREIGN KEY (sprostrekovatelID) REFERENCES zamestnanec(zamestnanecID) on delete cascade
);


-------------------------------
        -- TRIGER --
-------------------------------

---- Generovanie ID tranzakcia ----
drop sequence T_seq;
create sequence T_seq;     -- sekvencia IDeciek
create or replace trigger tranzakcia_id_gen
    before insert on tranzakcia
    for each row
begin
    :NEW.tranzakciaID := T_seq.nextval;
end;


---- Generovanie ID platobna karta ----
drop sequence Kart_seq;
create sequence Kart_seq;
create or replace trigger karta_id_gen
    before insert on platobnakarta
    for each row
begin
    :NEW.platobnakartaID := Kart_seq.nextval;
end;

--- Kontrola minimalnej mzdy ---
--set serveroutput on;
create or replace  trigger check_minimum_wage
    before insert on zamestnanec

    for each row
    Declare
        nieje_ani_minimalna_mzda Exception;
begin
    if :new.plat < 580 then
            Raise nieje_ani_minimalna_mzda;

    end if;

    EXCEPTION
        when nieje_ani_minimalna_mzda then
            :new.plat := 580;
        DBMS_OUTPUT.put_line('dana hodnota v stlpci plat nezodpoveda minimalnej mzde na SR preto sa zmenila na hodotu minimalnej mzdy ');
end;








-------------------------------
        -- PROCEDURA 1 --
-------------------------------
--- Procedura na vypisanie statistiky
--- tato statistika ukazuje ake maju jednotlive generacie
--- uspori na svojich uctoch

--set serveroutput on;
create or replace procedure statistika_usporov is
cursor tmp_tab is select k.meno, k.priezvisko, to_char(k.datum_narodenia, 'dd.mm.yyyy') datum, u.zostatok from klient k, ucet u where k.klientID = u.vlastni;
    line tmp_tab%rowtype;   -- premenna kde sa ulozi jeden riadok

    stat0_20 number default 0;      -- premena na pocet usporov ludi 0-20 rokov
    cnt0_20 number default 0;      -- pocitadlo
    stat21_40 number default 0;     -- premena na pocet usporov ludi 21-40 rokov
    cnt21_40 number default 0;
    stat41_60 number default 0;     -- premena na pocet usporov ludi 41-60 rokov
    cnt41_60 number default 0;
    stat61 number default 0;        -- premena na pocet usporov ludi 61 + rokov
    cnt61 number default 0;

    vek number;
    den_n number;                   -- den narodenia klienta
    mesiac_n number;                -- mesiac narodenia klienta
    rok_n number;                   -- rok narodenia klienta

    den_aktual number;
    mesiac_aktual number;
    rok_aktual number;
begin
    DBMS_OUTPUT.PUT_LINE('--- Statistika usporov klinetov v jednotlivy kategoriach ---');
    open tmp_tab;
    loop
        fetch tmp_tab into line;
        exit when tmp_tab%notfound;

        -- ziskanie aktualneho datumu
        den_aktual := to_number(to_char(sysdate, 'dd'));
        mesiac_aktual := to_number(to_char(sysdate, 'mm'));
        rok_aktual := to_number(to_char(sysdate, 'yyyy'));

        -- ziskanie datumu narodenia
        den_n := to_number(substr(line.datum,1,2));
        mesiac_n := to_number(substr(line.datum,4,2));
        rok_n := to_number(substr(line.datum,7,4));

        --- ziskanie veku klinta
        vek := rok_aktual - rok_n;
        if mesiac_aktual < mesiac_n then
            vek := vek - 1;
        end if;
        if mesiac_aktual = mesiac_n then
            if den_aktual < den_n then
                vek := vek -1;
            end if;
        end if;

        if vek <= 20 then
            stat0_20 := stat0_20 + line.zostatok;
            cnt0_20 := cnt0_20 + 1;
        end if;
        if (vek > 20 and vek < 40) then
            stat21_40 := stat21_40 + line.zostatok;
            cnt21_40 := cnt21_40 + 1;
        end if;
        if (vek > 40 and vek < 60) then
            stat41_60 := stat41_60 + line.zostatok;
            cnt41_60 := cnt41_60 + 1;
        end if;
        if vek > 61 then
            stat61 := stat61 + line.zostatok;
            cnt61 := cnt61 + 1;
        end if;

    end loop;

    -- Klienti 0-20 --
    if cnt0_20 != 0 then
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 0-20 rokov maju uspory v hodnote: ' || trunc(stat0_20 / cnt0_20,2));
    else
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 0-20 rokov maju uspory v hodnote: ' || stat0_20);
    end if;

    -- Klienti 21-40 --
    if cnt21_40 != 0 then
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 21-40 rokov maju uspory v hodnote: ' || trunc(stat21_40 / cnt21_40,2));
    else
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 21-40 rokov maju uspory v hodnote: ' || stat21_40);
    end if;

    -- Klinti 41-60 --
    if cnt41_60 != 0 then
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 21-40 rokov maju uspory v hodnote: ' || trunc(stat41_60 / cnt41_60,2));
    else
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 21-40 rokov maju uspory v hodnote: ' || stat41_60);
    end if;

    -- Klinti 61 + --
    if cnt61 != 0 then
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 21-40 rokov maju uspory v hodnote: ' || trunc(stat61 / cnt61,2));
    else
        DBMS_OUTPUT.PUT_LINE('Klienti ktori maju 21-40 rokov maju uspory v hodnote: ' || stat61);
    end if;

    close tmp_tab;
end;
---------------------------------------------------------------------------


-------------------------------
        -- PROCEDURA 2 --
-------------------------------
-- najde predajjne ktore maju otvorene v danom casovom rozmedzi

--set serveroutput on;
create or replace procedure najdi_predajne_kde_maju_vtedy_otvorene(od IN number, do in number)
as
cursor od_do is select p.mesto, p.hodinyod, p.hodinydo from pobocka p;
od_do_tmp od_do%ROWTYPE;
tmp_od int;
tmp_do int;
zle_argumenty EXCEPTION ;
BEGIN
    IF od_do %ISOPEN THEN
        CLOSE od_do ;
    END IF;

    IF do < od THEN
        Raise zle_argumenty;
    else

    OPEN od_do;

    LOOP
        FETCH od_do INTO od_do_tmp;
        EXIT WHEN od_do%NOTFOUND;
        tmp_od := cast((substr(od_do_tmp.hodinyod,1,2)) as integer);
        tmp_do := cast((substr(od_do_tmp.hodinydo,1,2)) as integer);
        IF tmp_od <= od  THEN
            if tmp_do >= do then
                DBMS_OUTPUT.put_line('zadanim parametrom sedi pobocka v: ' ||od_do_tmp.mesto|| ' s otvaracimi hodinami od -> ' ||od_do_tmp.hodinyod || ' do '||od_do_tmp.hodinydo);
            end if;

        END IF;
    END LOOP;

    CLOSE od_do;
    end if;

    EXCEPTION
    when zle_argumenty then
        DBMS_OUTPUT.put_line('zle argumenty ');

END;
-------------------------------------------------------------------------------------


-------------------------------
        -- PROCEDURA 3 --
-------------------------------
----tato procedura vyrata klientovi kolko penazi vytazi zo svojho uctu za dany cas v mesiacoch

--set serveroutput on;
create or replace procedure vyrataj_totalny_zisk(id_klienta IN number, pocet_mesiacov in number)
as
cursor ucty is select u.* from ucet u where vlastni = id_klienta and typuctu = 'sporiaci';
tmp_ucet ucty%ROWTYPE;
tmp_suma float;
tmp_celkova_suma float;
ratac int;
BEGIN
    IF ucty %ISOPEN THEN
        DBMS_OUTPUT.put_line('klient s id: '||id_klienta||' nema ziadne sporiace ucty');
        CLOSE ucty ;
    END IF;

    OPEN ucty;

    tmp_celkova_suma := 0.0;

    LOOP
        FETCH ucty INTO tmp_ucet;
        EXIT WHEN ucty%NOTFOUND;

        ratac := pocet_mesiacov;
        tmp_suma := tmp_ucet.zostatok;

        WHILE ratac >= 0
        loop
            ratac := ratac - 1;
            tmp_suma :=  tmp_suma + tmp_suma * tmp_ucet.urok;
        END loop;

        tmp_celkova_suma := tmp_celkova_suma + tmp_suma;
    END LOOP;
    DBMS_OUTPUT.put_line('na uctoch klienta s id: '||id_klienta||' bude po '||pocet_mesiacov|| ' mesiacoch suma :'||tmp_celkova_suma||' eur s danymi urokmi');
    CLOSE ucty;
END;
------------------------------------------------------------------------------





insert into pobocka (hodinyod, hodinydo, ulica, mesto, psc) values ('08:00','16:00','Hviezdoslavova','Lokca','02951');
insert into pobocka (hodinyod, hodinydo, ulica, mesto, psc) values ('08:00','15:00','Podstarobincom','Vasilov','02952');
insert into pobocka (hodinyod, hodinydo, ulica, mesto, psc) values ('10:00','17:00','Pod mostom','Babin','02352');


insert into zamestnanec (meno, priezvisko, ulica, mesto, psc,plat, pracuje, nadrriadeny) values ('Pavol','fendek','Brabirla','Lokca','02951',860,1,null);
insert into zamestnanec (meno, priezvisko, ulica, mesto, psc,plat, pracuje, nadrriadeny) values ('Ignac','Povala','Brezovica','Breza','02955',500,1,'Pavol');
insert into zamestnanec (meno, priezvisko, ulica, mesto, psc,plat, pracuje, nadrriadeny) values ('Jozef','Hruska','Lomna','Lomna','02956',500,2,null);
insert into zamestnanec (meno, priezvisko, ulica, mesto, psc,plat, pracuje, nadrriadeny) values ('Frantise','Mrkava','Trilo','Lomna','02956',500,2,'Jozef');
insert into zamestnanec (meno, priezvisko, ulica, mesto, psc,plat, pracuje, nadrriadeny) values ('Jozefina','Bryndzova','Javorova','Lomna','02956',630,3,null);



insert into klient (meno, priezvisko, datum_narodenia,ulica, mesto, psc, limit, pravo_zmena_hesla, pravo_pridat_disponenta, pravo_zmena_limit) values ('Jan','Homola', to_date('07.10.1999', 'dd.mm.yyyy'),'Lan','Lokca','02951',null,1,1,1);
insert into klient (meno, priezvisko, datum_narodenia, ulica, mesto, psc, limit, pravo_zmena_hesla, pravo_pridat_disponenta, pravo_zmena_limit) values ('Damian','Gorcak', to_date('03.9.1999', 'dd.mm.yyyy'), 'koskos','Breza','02954',null,1,0,1);
insert into klient (meno, priezvisko, datum_narodenia, ulica, mesto, psc, limit, pravo_zmena_hesla, pravo_pridat_disponenta, pravo_zmena_limit) values ('Ferinko','Doboška', to_date('07.10.1988', 'dd.mm.yyyy'),'Mrkvickova','Breza','02966',null,1,1,1);

insert into klient (meno, priezvisko, datum_narodenia, ulica, mesto, psc, limit, pravo_zmena_hesla, pravo_pridat_disponenta, pravo_zmena_limit) values ('Marcel','Banan', to_date('03.10.1970', 'dd.mm.yyyy'),'Bandikova','Rabca','02936',null,1,1,1);
insert into klient (meno, priezvisko, datum_narodenia, ulica, mesto, psc, limit, pravo_zmena_hesla, pravo_pridat_disponenta, pravo_zmena_limit) values ('Tomas','Sychravy', to_date('01.10.2003', 'dd.mm.yyyy'),'Mrkvickova','Breza','02966',null,1,1,1);
insert into klient (meno, priezvisko, datum_narodenia, ulica, mesto, psc, limit, pravo_zmena_hesla, pravo_pridat_disponenta, pravo_zmena_limit) values ('Verona','Raciakova', to_date('07.10.1950', 'dd.mm.yyyy'),'Zahumnica','Lokca','02166',null,1,1,1);



insert into ucet (nazov, zostatok, zriadenie, typuctu, limit, vlastni) values ('GOrkyho ucet',800,'11-11-2000','bezny',800,2);
insert into ucet (nazov, zostatok, zriadenie, typuctu, heslo, vlastni) values ('Hanzov ucet',300,'10-05-1999','internetovy','12345',1);

insert into ucet (nazov, zostatok, zriadenie, typuctu, heslo, vlastni) values ('Marcelov ucet',1300,'10-05-1999','internetovy','12345',4);
insert into ucet (nazov, zostatok, zriadenie, typuctu, heslo, vlastni) values ('Tomasov ucet',300,'10-05-2005','internetovy','12345',5);
insert into ucet (nazov, zostatok, zriadenie, typuctu, heslo, vlastni) values ('Veronin ucet',500,'10-05-1999','internetovy','12345',6);




insert into tranzakcia (ucetID, druhtranzakcie, ciastka, datum, sprostrekovatelID) values (1,'prevod',344,'04-03-3333', 3);
insert into tranzakcia (ucetID, druhtranzakcie, ciastka, datum, sprostrekovatelID) values (2,'Poslal papkovi',144,'02-03-3333', 2);
insert into tranzakcia (ucetID, druhtranzakcie, ciastka, datum, sprostrekovatelID) values (2,'prijem',4444,'01-03-3333', 2);


insert into platobnakarta (drzitel, PIN, platobnylimit, pobockaID, ma)  values ('Jozko Mrkva', 1111, 50, 1, 2);


--- spustenie procedury na statistiku
begin
    statistika_usporov ();
    najdi_predajne_kde_maju_vtedy_otvorene(8,11);
    vyrataj_totalny_zisk(2,15);
end;

-------------------------------------- SELECTY -----------------------------------------


--------------------- selecty na skusku foreign keys ----------------------------

--select  z.meno from zamestnanec z, pobocka p where z.pracuje =p.pobockaID and z.mesto = 'Lokca';

--select  z.nazov from ucet z, klient p where z.vlastni =p.klientID and z.typuctu = 'bezny';

--select  p.mesto,z.meno  from zamestnanec  z, pobocka p where z.pracuje = p.pobockaID order by z.plat;

--select p.mesto, p.hodinyod, p.hodinydo  from pobocka p;

--select  z.meno from zamestnanec z, pobocka p where z.pracuje =p.pobockaID and z.mesto = 'Lokca';

--select  z.nazov from ucet z, klient p where z.vlastni =p.klientID and z.typuctu = 'bezny';

--------------------- selecty na skusku foreign keys ----------------------------





--select urceny na vyratanie sumy kolko minie dana polozka v danom meste na vyplaty
select  p.mesto, sum(z.plat)
from zamestnanec  z, pobocka p
where z.pracuje = p.pobockaID
group by p.mesto
order by sum(z.plat);


--select urceny na otvaracie hodiny
select p.mesto, p.hodinyod, p.hodinydo
from pobocka p;


--tento select je cez 3 tabulky a ukaze aku sumu previedol v transakciach jednotlivy zamestnanec
--zoradene od najmensej po najvaciu
select  Z.meno, Z.priezvisko, sum(T.ciastka)
from zamestnanec Z , tranzakcia T, ucet U
where U.ucetID = T.ucetID and T.sprostrekovatelID = Z.zamestnanecID
GROUP BY Z.zamestnanecID, Z.meno, Z.priezvisko
order by sum(T.ciastka);


--select na vypisanie klientov ktory maju iba internetovy ucet, a zostatok na ucte
select K.meno, K.priezvisko, U.zostatok
from klient K, ucet U
where K.klientID = U.vlastni
and U.typuctu = 'internetovy'
and not exists
    (select *
    from ucet U
    where K.klientID = U.vlastni and U.typuctu in ('bezny','sporiaci')
    );


--tento vybere zamestnanca ktory urobil tranzakciu dna 04-03-3333
select z.meno, z.priezvisko from zamestnanec z
where z.zamestnanecID in
     (select t.sprostrekovatelID  from tranzakcia t
            where t.DATUM = '04-03-3333'
         );


--tento vybere zamestnanca ktory urobil tranzakciu pre ucet s nazvom 'Hanzov ucet'
select z.meno, z.priezvisko
from zamestnanec z
where z.zamestnanecID in
     (select t.sprostrekovatelID  from tranzakcia t
            where t.ucetID in (
                select u.ucetID from ucet u
                where u.nazov = 'Hanzov ucet'
                )
         );


-- selec na vypisanie sefa na pobocke a pobocky zoradi abecedne
select P.mesto, Z.meno, Z.priezvisko
from pobocka P, zamestnanec Z
where P.pobockaID = Z.pracuje and Z.nadrriadeny is null
order by 1;




EXPLAIN PLAN FOR
select  Z.meno, Z.priezvisko, sum(T.ciastka)
from zamestnanec Z natural join tranzakcia T where  T.sprostrekovatelID = Z.zamestnanecID
GROUP BY Z.zamestnanecID, Z.meno, Z.priezvisko
order by sum(T.ciastka);



SELECT * FROM TABLE(dbms_xplan.display);

create index inex on tranzakcia(sprostrekovatelID);

EXPLAIN PLAN FOR
select  Z.meno, Z.priezvisko, sum(T.ciastka)
from zamestnanec Z natural join tranzakcia T where  T.sprostrekovatelID = Z.zamestnanecID
GROUP BY Z.zamestnanecID, Z.meno, Z.priezvisko
order by sum(T.ciastka);

drop index inex;

SELECT * FROM TABLE(dbms_xplan.display);


-----------------------------
    -- Nastavenie prav --
-----------------------------
grant all on pobocka to XGORCA00;
grant all on zamestnanec to XGORCA00;
grant all on klient to XGORCA00;
grant all on platobnakarta to XGORCA00;
grant all on ucet to XGORCA00;
grant all on tranzakcia to XGORCA00;

grant execute on statistika_usporov to XGORCA00;
grant execute on najdi_predajne_kde_maju_vtedy_otvorene to XGORCA00;
grant execute on vyrataj_totalny_zisk to XGORCA00;


------------------------------------
    -- Materializovany pohlad --
------------------------------------

drop materialized view vypis_zostatkov;


create materialized view log on ucet with primary key, rowid including new values;

create materialized view vypis_zostatkov
cache                       -- optimalizacia citania z pohladu
build immediate             -- hned po vytvoreni naplni
refresh fast on commit      -- pri komite aktualizuje hned pohlad
enable query rewrite
as select u.ucetID, u.nazov, u.typuctu, u.zostatok from ucet u;

grant all on vypis_zostatkov to XGORCA00;

select * from vypis_zostatkov;

insert into XHOMOL27.ucet (nazov, zostatok, zriadenie, typuctu, heslo, vlastni) values ('Ferov ucet',200,'10-05-1999','internetovy','12345',3);
commit ;

select * from vypis_zostatkov;
